// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Transaction {
  id          String   @id @default(uuid())
  date        DateTime
  amount      Float
  description String
  category    String
  userId      String   @default("user-001")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([category])
  @@index([date])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  date      DateTime
  tags      String   // Comma-separated tags
  userId    String   @default("user-001")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([date])
}

model CalendarEvent {
  id        String   @id @default(uuid())
  title     String
  start     DateTime
  end       DateTime
  location  String?
  attendees String   // JSON string array
  userId    String   @default("user-001")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([start])
}

// TODO for Claude Code: Implement ApiCredential model
// This model stores encrypted OAuth tokens and API credentials per user
//
// Requirements:
// 1. Add ApiCredential model with fields:
//    - id: String (UUID)
//    - userId: String (foreign key - will need User model)
//    - service: String (e.g., 'gmail', 'google-calendar', 'plaid')
//    - accessToken: String (encrypted)
//    - refreshToken: String? (encrypted, optional)
//    - expiresAt: DateTime? (when token expires)
//    - metadata: String? (JSON - store scopes, account info, etc.)
//    - createdAt: DateTime
//    - updatedAt: DateTime
//
// 2. Add unique constraint on [userId, service]
// 3. Add index on userId for fast lookups
// 4. Add User model if not exists (minimal: id, email, name)
// 5. Add relation from ApiCredential to User with cascade delete
//
// 6. Create migration: npx prisma migrate dev --name add_api_credentials
// 7. Generate Prisma client: npx prisma generate
//
// Example schema:
//
// model User {
//   id              String          @id @default(uuid())
//   email           String          @unique
//   name            String?
//   createdAt       DateTime        @default(now())
//   updatedAt       DateTime        @updatedAt
//   apiCredentials  ApiCredential[]
// }
//
// model ApiCredential {
//   id           String    @id @default(uuid())
//   userId       String
//   service      String
//   accessToken  String
//   refreshToken String?
//   expiresAt    DateTime?
//   metadata     String?
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime  @updatedAt
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@unique([userId, service])
//   @@index([userId])
// }
